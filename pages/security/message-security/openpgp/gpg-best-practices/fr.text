@title = "Bonnes pratiques pour l'utilisation d'OpenPGP"

h2. Comment utiliser ce guide

Nous avons rassemblé ici beaucoup d'informations sur la configuration de GnuPG. Vous trouverez des explications détaillées pour chaque suggestion de configuration. Beaucoup de ces changements nécessitent que vous effectuiez des modifications sur le fichier de configuration GnuPG de votre machine, qui se trouve à l'emplacement @~/.gnupg/gpg.conf@.

h2. Utilisez du logiciel libre, et maintenez-le à jour

La sécurité de l'information est quelque chose de trop important pour être laissé à du logiciel propriétaire. Vous devriez utiliser une implémentation OpenPGP libre, et la maintenir à jour. L'implémentation libre canonique d'OpenPGP est [[GnuPG -> https://gnupg.org/]], et elle est disponible pour tous les systèmes d'exploitation modernes et répandus. Cependant, vous ne pouvez pas juste installer GnuPG et le laisser tel quel. Vous *devez* le maintenir à jour pour que les problèmes de sécurité critiques puissent être corrigés. Tous les logiciels ont des bogues, et GnuPG ne fait pas exception. Suivez les instructions suivantes en fonction de votre système d'exploitation :

- GNU/Linux (Debian, Ubuntu, Mint, Fedora, etc.) : := Votre système d'exploitation installe automatiquement GnuPG et le maintiendra à jour pour vous.
- Windows : := Vous pouvez installer [[Gpg4win -> https://gpg4win.org/]] et [[vous abonner à gpg4win-announce -> https://lists.wald.intevation.org/mailman/listinfo/gpg4win-announce]] pour savoir quand le mettre à jour.
- Mac OS : := Vous pouvez installer [[la suite GPG de GPGTools -> https://gpgtools.org/]] (à voir : comment savoir quand mettre à jour ?).
- Compiler à partir du code source pour n'importe quel autre système d'exploitation : := Vous devriez vous [[inscrire à gnupg-announce -> https://lists.gnupg.org/mailman/listinfo/gnupg-announce]] pour savoir quand mettre à jour.

h2. Choisir un serveur de clés et configurer votre machine pour rafraîchir votre trousseau de clés

Si vous ne rafraîchissez pas régulièrement vos clés publiques, vous ne serez pas informé à temps des expirations ou des révocations, or il faut absolument que vous soyiez au courant de ce genre d'événements ! Il y a deux étapes nécessaires pour recevoir les mises à jour de clés. Beaucoup d'utilisateurs envoient leurs mises à jour de clés à des serveurs de clés. Afin de récupérer ces mises à jour, vous devez d'abord vous assurer que vous utilisez un serveur de clés qui fonctionne correctement. Vous devez ensuite configurer votre machine pour recevoir les mises à jour de clés de façon régulière.

h3. Utilisez le groupe de serveurs de clés sks plutôt qu'un seul serveur, et utilisez des connexions sécurisées

La plupart des clients OpenPGP sont fournis avec une configuration qui ne s'adresse qu'à un seul serveur de clés spécifique. Ce n'est pas idéal : si le serveur de clés cesse de fonctionner, ou pire, s'il semble marcher mais ne fonctionne en fait pas correctement, vous risquez de ne pas recevoir des mises à jour de clés d'importance critique. Non seulement cela constitue un point de défaillance unique, mais c'est également une importante fuite d'information sur les relations entre utilisateurs OpenPGP, et donc une cible d'attaque.

Pour ces raisons, nous recommandons l'usage du [[groupe de serveur de clés sks -> https://sks-keyservers.net/overview-of-pools.php]]. Le bon fonctionnement des machines de ce groupe est vérifié par des contrôles de routine réguliers. Si un serveur ne fonctionne pas bien, il sera automatiquement retiré du groupe.

Vous devriez aussi vous assurer que vous communiquez avec le groupe de serveurs de clés au travers d'un canal chiffré, en utilisant un protocole qui s'appelle hkps. Pour utiliser hkps, vous devez d'abord installer gnupg-curl :

pre. sudo apt-get install gnupg-curl

Ensuite, pour utiliser le groupe de serveurs de clés, il vous faut [[télécharger l'autorité de certification de sks-keyservers.net -> https://sks-keyservers.net/sks-keyservers.netCA.pem]], et la sauvegarder quelque part sur votre machine. Souvenez-vous du chemin où vous l'avez sauvegardée.

Il faut ensuite utiliser les paramètres suivants dans @~/.gnupg/gpg.conf@, et spécifier le chemin d'accès complet où vous avez sauvegardé le fichier .pem ci-dessus :

pre.. keyserver hkps://hkps.pool.sks-keyservers.net
keyserver-options ca-cert-file=/chemin/vers/CA/sks-keyservers.netCA.pem

p. Dorénavant, vos interactions avec le serveur de clés seront chiffrées avec hkps, qui masquera votre réseau de relations sociales pour éviter qu'il ne soit divulgué à quiconque intercepterait votre trafic réseau. Par exemple, si vous faites @gpg --refresh-keys@ sur un serveur de clés qui ne supporte que hkp, quelqu'un qui surveillerait votre trafic pourrait voir toutes les clés que vous avez dans votre trousseau en observant les demandes de mises à jour que vous envoyez pour chacune d'entre elles. C'est là une information plutôt intéressante !

_Note :_ [[hkps://keys.indymedia.org -> https://keys.indymedia.org/]], [[hkps://keys.mayfirst.org -> https://keys.mayfirst.org]] et [[hkps://keys.riseup.net -> https://keys.riseup.net]] sont d'autres serveurs qui proposent ce service (mais il reste recommandé de leur préférer un groupe de serveurs).

h3. Assurez-vous que toutes les clés sont rafraîchies à l'aide du serveur de clés que vous avez sélectionné

Un utilisateur qui crée sa clé peut indiquer un serveur de clés spécifique auquel s'adresser pour récupérer les nouvelles versions de sa clé. Il est recommandé d'utiliser l'option suivante dans @~/.gnupg/gpg.conf@, qui ignorera de telles instructions :

pre. keyserver-options no-honor-keyserver-url

C'est une bonne chose à faire car (1) ça évite que les gens indiquent des méthodes non-sécurisées pour télécharger des mises à jour de leurs clés et (2) même si le serveur choisi utilisait hkps, le rafraîchissement échouerait parce que le ca-cert ne correspondrait pas, donc la clé ne serait jamais mise à jour. Notez aussi qu'un attaquant pourrait désigner un serveur de clés sous son contrôle afin de surveiller à quel moment, et depuis quel endroit, vous rafraîchissez ses clés.

h3. Rafraîchissez vos clés l'une après l'autre

Maintenant que vous avez configuré un bon serveur de clés, vous devez vous assurer que vous rafraîchissez vos clés régulièrement. La meilleure façon de faire cela sur Debian et Ubuntu est d'utiliser parcimonie :

pre. sudo apt-get install parcimonie

[[Parcimonie-> https://gaffer.ptitcanardnoir.org/intrigeri/code/parcimonie/]] est un démon qui rafraîchit lentement votre trousseau de clés à partir d'un serveur de clés en passant par [[Tor -> https://www.torproject.org/]]. Il utilise un délai aléatoire, et un nouveau circuit Tor pour chaque clé. Le but est de compliquer la vie d'un attaquant qui voudrait corréler les mises à jour de clés avec votre trousseau.

Vous ne devriez *pas* utiliser @gpg --refresh-keys@ ou la fonction équivalente de votre client de messagerie pour rafraîchir les clés, parce que vous dévoilez ainsi à toute personne qui vous écoute, et à l'opérateur du serveur de clés, la totalité des clés que vous désirez rafraîchir.

h3. Ne faites pas aveuglément confiance aux clés des serveurs de clés

N'importe qui peut envoyer des clés sur les serveurs et il n'y a pas de raison de croire que celles que vous téléchargez appartiennent vraiment à la personne dont elles indiquent le nom. Vous devez donc vérifier personnellement avec le propriétaire l'empreinte entière de sa clé. Vous devriez faire cette vérification face à face ou par téléphone.

Une fois que vous avez vérifié l'empreinte, vous pouvez télécharger la bonne clé depuis un serveur:

bc. gpg --recv-key '<fingerprint>'

La prochaine étape sert à confirmer que vous avez bien reçu la bonne clef du serveur. Le serveur de clefs pourrait vous avoir acheminé une clef différente que celle dont vous avez fait la requête. Si vous utilisez une version antérieure à 2.1 de gpg, vous devez confirmer l'empreinte manuellement après avoir téléchargé la clef (les versions 2.1 et ultérieures refuseront les clefs incorrectes provenant d'un serveur de clef).

Vous pouvez confirmer l'empreinte de clef en utilisant une des deux méthodes suivantes:

Option 1. Vérifier l'empreinte qui se trouve maintenant dans votre trousseau de clefs:

bc. gpg --fingerprint '<fingerpring>'

Option 2. Tenter de signer (de façon locale) la clef avec l'empreinte que vous détenez:

bc. gpg --lsign-key '<fingerprint>'

Si vous pensez être en mesure de vérifier l'empreinte de la clef avec la personne qui détient cette clef, la méthode préférée est de signer la clef de façon locale. Si vous désirez publiciser votre connexion à la personne qui détient la clef, vous pouvez faire une signature qui peut être exportée de manière publique avec [@--sign-key@] au lieu de [@--lsign-key@].

Faites attention aux apostrophes droites ci-dessus (') qu'il faut placer autour de votre empreinte complète et qui sont nécessaires pour que la commande fonctionne. Les guillemets droits (") fonctionnent également.

h3. Ne vous fiez pas à l'identifiant de clé

Les identifiants courts pour les clés OpenPGP, par exemple 0x2861A790, sont d'une longueur de 32 bits. Il a été [[démontré -> https://www.asheesh.org/note/debian/short-key-ids-are-bad-news.html]] que l'on pouvait facilement les usurper avec une autre clé qui a le même identifiant. Les identifiants longs pour les clés OpenPGP (par exemple 0xA1E6148633874A3D) sont d'une longueur de 64 bits. Il est [[trivial -> http://thread.gmane.org/gmane.ietf.openpgp/7413]] de générer des collisions dessus, ce qui est également un [[problème potentiellement sérieux -> https://www.debian-administration.org/users/dkg/weblog/105]].

Pour utiliser un indentifiant de clef fort du point de vue cryptographique, vous devriez utiliser les empreintes complètes. Vous ne devriez _jamais_ vous fier aux identifiants courts, ni aux identifiants longs.

Vous devriez minimalement configurer @keyid-format 0xlong@ et @with-fingerprint@ comme options à gpg (ajoutez-les dans @~/.gnupg/gpg.conf@) pour augmenter les identifiants affichés à 64 bits et pour afficher inconditionnellement les empreintes complètes.

Veuillez noter qu'il y a eu un [[bug dans enigmail ->https://sourceforge.net/p/enigmail/bugs/239/]], qui a été réparé dans la version 1.7.0: si vous configurez l'option 'with-fingerprint' pour afficher les empreintes complètes dans les listes de clefs, l'empreinte qui sera affichée dans la fenêtre de gestion des clefs d'enigmail sera celle d'une sous-clef plutôt que l'empreinte de la clef primaire. Pour trouver l'empreinte de votre clef primaire (par exemple si vous voulez donner cette empreinte à une personne à des fins de vérification lors d'une séance de signatures de clefs), vous pouvez afficher l'empreinte de toutes vos clefs secrètes avec la commande suivante:

bc. gpg --with-fingerprint --list-secret-key

h3. Vérifier l'empreinte d'une clef avant de l'importer.

Si vous avez reçu ou téléchargé une clef dans un fichier <keyfile>, vous pouvez et devriez afficher son empreinte avant de l'importer dans votre trousseau. De cette manière, vous serez en mesure de vérifier l'empreinte sans risquer d'importer une clef qui a été compromise:

pre. gpg --with-fingerprint <keyfile>

h2. Configuration de la clé

Maintenant que vous savez recevoir des mises à jour de clés régulières à partir d'un serveur de clés bien maintenu, il faut vérifier que votre clé OpenPGP est configurée de façon optimale. Beaucoup de ces changements peuvent nécessiter que vous génériez une nouvelle clé. [[Plus->gpg-keys]]

h2. En résumé

Toutes les recommandations discutées dans ce guide ont été réunies dans un fichier de configuration à la [[duraconf -> https://github.com/ioerror/duraconf]] de Jacob Appelbaum sur la "collecte de fichiers de configuration durcis". Vous pouvez [[l'enregistrer en cliquant sur ce lien avec le bouton droit de la souris et sauver le fichier gpg.conf -> https://github.com/ioerror/duraconf/raw/master/configs/gnupg/gpg.conf]] et remplacer votre @~/.gnupg/gpg.conf@ (linux et MacOS). Pour les utilisateurs de Windows, le fichier gpg.conf doit être sauvegardé dans le répertoire @AppData\GnuPG\@.

Il vous faudra décommenter et/ou ajuster les paramètres suivants : @default-key@, @keyserver-options ca-cert-file@ et @keyserver-options http-proxy@.

Voici tous les paramètres recommandés présentés dans ce guide, rassemblés en un seul bloc. Notez que cela suppose que vous utilisez le groupe de serveurs de clés sks au travers du protocole hkps. Si vous utilisez seulement hkp, ou n'utilisez pas le groupe de serveurs de clés sks, vous pouvez retirer les lignes qui concernent le /chemin/vers/CA. Les lignes suivantes sont à placer dans votre fichier @~/.gnupg/gpg.conf@ :

pre.. # Utiliser le serveur de clés sks via hkps
keyserver hkps://hkps.pool.sks-keyservers.net
keyserver-options ca-cert-file=/chemin/vers/CA/sks-keyservers.netCA.pem
keyserver-options no-honor-keyserver-url
# Lors de l'affichage de certificats, séparer les identifiants utilisateur et
# les clés
fixed-list-mode
# Les identifiants de clés courts sont triviaux à usurper ; il est facile de
# créer une collision sur les identifiants de clé longs ; si vous voulez des
# identifiants de clé forts, vous voudrez toujours voir l'empreinte
keyid-format 0xlong
with-fingerprint
# Quand tous les destinataires supportent plusieurs hachés, choisir le plus
# fort
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
# Les préférences choisies pour de nouvelles clés devraient donner la priorité
# aux algorithmes les plus forts
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 BZIP2 ZLIB ZIP Uncompressed
# Si vous utilisez un environnement graphique (et même si ce n'est pas votre
# cas) vous devriez utiliser un agent (les arguments sont similaires à ceux de
# https://www.debian-administration.org/users/dkg/weblog/64)
use-agent
# Vous devriez toujours savoir au premier coup d'œil quels sont les
# identifiants utilisateur dont gpg pense qu'ils sont légitimement liés aux
# clés de votre trousseau
verify-options show-uid-validity
list-options show-uid-validity
# Lorsque vous faites une certification OpenPGP, utiliser un haché plus fort
# que le choix par défaut (SHA1)
cert-digest-algo SHA512

h2. Suggestions supplémentaires

h3. Avez-vous une copie de sauvegarde chiffrée de votre clé secrète ?

Revérifiez-le.

h3. N'incluez pas de "Commentaire" dans votre identifiant utilisateur

Si vous pensez avoir besoin du champ "Commentaire" dans votre identifiant utilisateur OpenPGP, s'il vous plaît, [[réfléchissez longtemps et attentivement avant de décider que c'est le cas -> https://www.debian-administration.org/users/dkg/weblog/97]]. Il est rare d'en avoir légitimement besoin, et avoir un champ "Commentaire" complique la vie des gens car ils ne savent pas précisément ce qu'ils certifient.
